// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           Role // "user" or "assistant"
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Document {
  id        String                      @id @default(cuid())
  title     String?
  embedding Unsupported("vector(1536)")
  metadata  Json?
  chunks    DocumentChunk[]
}

model DocumentChunk {
  id         String                      @id @default(cuid())
  documentId String
  document   Document                    @relation(fields: [documentId], references: [id])
  content    String
  embedding  Unsupported("vector(1536)")
  section    String?
  page       Int?
  orderInDoc Int?
  metadata   Json?
  fts        Unsupported("tsvector")?
  createdAt  DateTime                    @default(now())
  // GIN index for metadata and FTS must be created manually in migration SQL
  // CREATE INDEX chunk_metadata_idx ON "DocumentChunk" USING GIN (metadata);
  // CREATE INDEX chunk_fts_idx ON "DocumentChunk" USING GIN (fts);

  @@index([documentId])
  @@index([section])
  @@index([page])
  @@index([orderInDoc])
}

enum Role {
  user
  assistant
}
